{"title":"arts_third_week","date":"2019-10-17T15:29:05.000Z","link":"2019/10/17/arts-third-week","tags":["arts"],"updated":"2019-10-19T13:40:59.447Z","content":"<h1 id=\"A\">A<a href=\"2019/10/17/arts-third-week#A\"></a></h1><p>题：<a href=\"https://leetcode-cn.com/problems/add-two-numbers/\" target=\"_blank\" rel=\"noopener\">两数相加</a><br>解：<a href=\"https://github.com/youguanxinqing/RoadOfDSA/blob/master/LeetCode/002/add_two_numbers.go\" target=\"_blank\" rel=\"noopener\">add_two_numbers.go</a></p>\n<h1 id=\"R\">R<a href=\"2019/10/17/arts-third-week#R\"></a></h1><p><a href=\"https://medium.com/hackernoon/why-is-python-so-slow-e5074b6fe55b\" target=\"_blank\" rel=\"noopener\">Why is Python so slow?</a></p>\n<p>国内有这样一帮人，溜溜球本事没有，只会人云亦云、疯狂 diss 别人，这是在寻常世界里。而技术圈中，这样的人还是存在，他们居然以用什么语言为荣，然后忽视其他语言的优点，专挑劣势，出言不逊，满足虚荣。我真想向他们推荐这篇文章……</p>\n<p>《Why is Python so slow?》这篇文章从三个角度阐述了为什么 Python 运行如此慢(甚至可以说在主流、具有可比性的语言中最慢)：</p>\n<ul>\n<li>因为全局解释器锁 GIL 的存在。</li>\n<li>因为是解释性而不是编译性语言。</li>\n<li>因为是动态类型语言。</li>\n</ul>\n<p><strong>第一点</strong>，如果你的程序是单进程单线程，或者是 I/O 密集型应用，那么有没有 GIL 锁对你的程序基本没有影响。所以上来就拿这玩意儿说事儿的人，基本是不懂装懂。<strong>第二点</strong>，Python 与 Java 都是字节码转机器语言，但 Java 的优势是 JIT，可以对热点代码段不断地做性能优化。为什么 CPython 不也搞个 JIT 呢？作者说得很清楚了，Java 用启动时间换取后来的运行速度，倘若这个程序启动之后就会一直运行下去，那这样做没问题。但是 Python 的适用场景是小型程序，其程序具有工具性质，要的就是快速开发，立即解决眼前困境，且可以多次重复利用。如果这样的程序启动时间很慢，谁又受得了呢？这也是终端工具少有见到 Java 写的缘故吧！<strong>最后一点，也是作者认为造成 Python 慢的主要原因。</strong>Python 作为一门动态语言，是希望使用者不必关心类型的选择，把注意力放在解决问题上。但这也造成了 Python 的运行速度很难得到优化，用作者原话是：It’s this design that makes it incredibly hard to optimise Python。</p>\n<p>事实上，Python 一直努力在速度与灵活之间做一个平衡。我们也能看得出来，这杆秤慢慢偏向了后者。我认为这样没有问题，因为速度由 C++ 掌控，稳定让 Java 独领风骚，而 Python，就应该精确定位自己的市场，并为此一直努力下去。总之，你想要没有 GIL，可以找 Jython；你想拥有 JIT，可以用 PyPy；如果你渴望速度，Cython 何尝不是一个选择。</p>\n<p>每一门语言的出现都有它的原因，而这一门语言能进入你的世界是因为它有合适的使用场景，有效解决了一部分其他语言无能为力的痛点。还是希望一些文盲技术者们能有敬畏之心，不要在自己不懂的领域里疯狂 DISS，毕竟，我只会以为自己看到了一条狗而已。</p>\n<h1 id=\"T\">T<a href=\"2019/10/17/arts-third-week#T\"></a></h1><p>在 vim 的 Visual 模式下：</p>\n<ul>\n<li><code>zf</code> 折叠代码</li>\n<li><code>zo</code> 反折叠</li>\n<li><code>zO</code> 对代码以递归方式反折叠</li>\n<li><code>zD</code> 递归删除当前选中代码的折叠标记，之后，这段代码不会被 <code>zM</code> 折叠</li>\n<li><code>zE</code> 清除当前窗口中的所有折叠标记</li>\n</ul>\n<p>在 vim 的 Normal 模式下：</p>\n<ul>\n<li><code>zR</code> 对全文件，以递归方式反折叠代码</li>\n<li><code>zM</code> 对全文件，以递归方式折叠代码</li>\n<li><code>zA</code> 当代码折叠时，反折叠；当代码未折叠时，折叠代码(以递归方式，存在折叠标记时才生效)</li>\n</ul>\n<p>在 vim 的 Normal 模式下：</p>\n<ul>\n<li><code>:set fdm=indent</code> 代码按照缩进格式自动折叠</li>\n<li><code>:set fdm=manual</code> 开启手动折叠代码</li>\n<li><code>zk</code> 折叠块上移</li>\n<li><code>zj</code> 折叠块下移</li>\n</ul>\n<p>关于折叠的快捷键 vim 还提供了很多，就不一一拿出来说明。以上是自己比较常用到的。</p>\n<h1 id=\"S\">S<a href=\"2019/10/17/arts-third-week#S\"></a></h1><p><a href=\"https://www.hongweipeng.com/index.php/archives/1588/\" target=\"_blank\" rel=\"noopener\">解答一个关于生成器的问题</a></p>\n","prev":{"title":"arts_four_week","link":"2019/10/25/arts-four-week"},"next":{"title":"arts_second_week","link":"2019/10/11/arts-second-week"},"plink":"http://yoursite.com/2019/10/17/arts-third-week/","toc":[{"title":"A","id":"A","index":"1"},{"title":"R","id":"R","index":"2"},{"title":"T","id":"T","index":"3"},{"title":"S","id":"S","index":"4"}]}